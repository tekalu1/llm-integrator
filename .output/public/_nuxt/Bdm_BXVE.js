import{d as _,r as d,v as c,x as u,y as a,O as h,P as g,z as k}from"./JqZd4KxG.js";const y={style:{"margin-bottom":"1em"}},w=["disabled"],x=["disabled"],A=_({__name:"stream",setup(C){const n=d([]),e=d(!1);let r=null;async function f(){if(!e.value){e.value=!0,n.value=[],r=new AbortController;try{const t=(await fetch("/api/stream-example",{signal:r.signal})).body?.getReader(),o=new TextDecoder;if(!t){e.value=!1;return}for(;;){const{value:l,done:p}=await t.read();if(p)break;const b=o.decode(l,{stream:!0}).split(`
`).filter(i=>i.startsWith("data: "));for(const i of b){const v=i.replace(/^data:\s*/,"");n.value.push(v)}}}catch(s){s.name==="AbortError"?console.log("通信はユーザーによって中断されました"):console.error("ストリーム読み込み中にエラーが発生しました",s)}finally{e.value=!1}}}function m(){r&&r.abort()}return(s,t)=>(c(),u("div",null,[t[0]||(t[0]=a("h1",null,"ストリーム結果",-1)),a("div",y,[a("button",{onClick:f,disabled:e.value},"開始",8,w),a("button",{onClick:m,disabled:!e.value},"停止",8,x)]),a("ul",null,[(c(!0),u(h,null,g(n.value,(o,l)=>(c(),u("li",{key:l},k(o),1))),128))])]))}});export{A as default};
